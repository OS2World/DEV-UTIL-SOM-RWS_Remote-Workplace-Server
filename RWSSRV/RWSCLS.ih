/****************************************************************************/
/* RWS - beta version 0.80                                                  */
/****************************************************************************/

// RWSCLS.IH
// Remote Workplace Server - Server WPS class "RWSxx" implementation header

/****************************************************************************/

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Remote Workplace Server - Server component.
 *
 * The Initial Developer of the Original Code is Richard L. Walsh.
 * 
 * Portions created by the Initial Developer are Copyright (C) 2004-2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * ***** END LICENSE BLOCK ***** */

/****************************************************************************/

/*
 * This file was generated by the SOM Compiler.
 * FileName: RWSCLS.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.2
 *     SOM Emitter emitih: 2.41
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_RWS08_ih
#define SOM_RWS08_ih

//#pragma checkout(suspend)

/*
 * Passthru lines: File: "C.ih", "before"
 */


   #define INCL_DOS
   #define INCL_WIN
   #include <os2.h>

#include <RWSCLS.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif  /* SOM_Scope */

/*
 * Passthru lines: File: "C.ih", "after"
 */


#ifndef SOM_CurrentClass
    #define SOM_CurrentClass RWS08CClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define RWS08_MaxNoMethods 0

/*
 * -- Instance data
 */
typedef void RWS08Data;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * Primary Implementation File Support
 */
#if (defined(RWS08_Class_Source) || defined(SOM_Module_rwscls_Source))

/*
 * Trace/Debug macro
 */
#ifndef RWS08MethodDebug
   #define RWS08MethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* RWS08MethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_RWS08CClassData.parentMtab
#undef SOMInstance
#define SOMInstance RWS08CClassData.parentMtab

#ifndef M_RWS08_Class_Source
   #define M_RWS08_Class_Source
#endif    /* M_RWS08_Class_Source */

/*
 * Overridden method: somDefaultInit
 */
#pragma linkage(somDefaultInit, system)
SOM_Scope void  SOMLINK somDefaultInit(RWS08 *somSelf,
		somInitCtrl* ctrl);
static char *somMN_RWS08somDefaultInit = "SOMObject::somDefaultInit";
static somId somId_RWS08somDefaultInit = &somMN_RWS08somDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_RWS08somDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
#pragma linkage(somDestruct, system)
SOM_Scope void  SOMLINK somDestruct(RWS08 *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
static char *somMN_RWS08somDestruct = "SOMObject::somDestruct";
static somId somId_RWS08somDestruct = &somMN_RWS08somDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_RWS08somDestruct
#endif

#if 0   // this isn't used & generates a warning, so hide it
static somMethodProc* RWS08_parent_WPTransient_somDestruct_resolved = 0;
#define RWS08_parent_WPTransient_somDestruct(somSelf,doFree,ctrl) \
  ((( somTD_SOMObject_somDestruct ) \
    ((RWS08_parent_WPTransient_somDestruct_resolved)? \
      RWS08_parent_WPTransient_somDestruct_resolved : \
      (RWS08_parent_WPTransient_somDestruct_resolved = \
	somParentNumResolve(RWS08CClassData.parentMtab, 1, SOMObjectClassData.somDestruct)))) \
	 (somSelf,doFree,ctrl))
#ifndef SOMGD_pmc_WPTransient_somDestruct
  #ifdef parent_WPTransient_somDestruct
     #undef parent_WPTransient_somDestruct
     #define SOMGD_pmc_WPTransient_somDestruct 1
  #else
     #define parent_WPTransient_somDestruct RWS08_parent_WPTransient_somDestruct
  #endif /* parent_WPTransient_somDestruct */
#endif /* SOMGD_pmc_WPTransient_somDestruct */
#ifndef parent_somDestruct
     #define parent_somDestruct RWS08_parent_WPTransient_somDestruct
#endif  /* parent_somDestruct */
#define RWS08_parents_somDestruct(arg0,arg1,arg2) (\
   RWS08_parent_WPTransient_somDestruct(arg0,arg1,arg2),\
 \
   (void) parent_somDestruct(arg0,arg1,arg2);
#endif // if 0

/*
 * Initialize the class data structure
 */
SOMEXTERN struct RWS08ClassDataStructure SOMDLINK RWS08ClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct RWS08CClassDataStructure SOMDLINK RWS08CClassData = {(somMethodTabs) NULL};

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t RWS08OM[] = {
    {    &somId_RWS08somDefaultInit,
         (somMethodProc *) somDefaultInit    },
    {    &somId_RWS08somDestruct,
         (somMethodProc *) somDestruct    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_RWS08 = "RWS08";
#ifndef somEMC_M_RWS08_defined
#define somEMC_M_RWS08_defined
static char * somEMC_M_RWS08 = "M_RWS08";
#endif
static char * somPCN_RWS08_WPTransient = "WPTransient";

static somId somPCRWS08[] = {
    &somPCN_RWS08_WPTransient,
};

static somStaticClassInfo RWS08SCI = {
    4, 0, 2, 0, 0, 0,
    RWS08_MajorVersion, RWS08_MinorVersion,
    0, RWS08_MaxNoMethods, 1,
    &somCN_RWS08,
    &somEMC_M_RWS08, 0,
    somPCRWS08,
    (somClassDataStructure *) &RWS08ClassData,
    (somCClassDataStructure *) &RWS08CClassData,
    (somStaticMethod_t *) NULL, RWS08OM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

RWS08 * SOMLINK RWS08NewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    WPTransientNewClass(WPTransient_MajorVersion,WPTransient_MinorVersion);	/* static reference */
    /* Explicit metaclass, so get it */ 
    M_RWS08NewClass(M_RWS08_MajorVersion,M_RWS08_MinorVersion);	/* static reference */
    return (somBuildClass(1,&RWS08SCI, somtmajorVersion, somtminorVersion));
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define RWS08_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl;\
      memcpy(ctrl,&(((somParentMtabStructPtr)RWS08CClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define RWS08_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl;\
      memcpy(ctrl,&(((somParentMtabStructPtr)RWS08CClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   myMask = ctrl->mask; 
#define RWS08_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   RWS08_DeInit_WPTransient_somDestruct(somSelf,0,ctrl); \
   if (doFree) _somDeallocate(_RWS08, (string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for WPTransient */
#define RWS08_Init_WPTransient_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define RWS08_DeInit_WPTransient_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */
//#pragma checkout(resume)

#endif       /* SOM_RWS08_ih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_M_RWS08_ih
#define SOM_M_RWS08_ih

//#pragma checkout(suspend)

#include <RWSCLS.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass M_RWS08CClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define M_RWS08_MaxNoMethods 0

/*
 * -- Instance data
 */
typedef void M_RWS08Data;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * Primary Implementation File Support
 */
#if (defined(RWS08_Class_Source) || defined(M_RWS08_Class_Source) || defined(SOM_Module_rwscls_Source))

/*
 * Trace/Debug macro
 */
#ifndef M_RWS08MethodDebug
   #define M_RWS08MethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* M_RWS08MethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Overridden method: wpclsInitData
 */
#pragma linkage(wpclsInitData, system)
SOM_Scope void  SOMLINK wpclsInitData(M_RWS08 *somSelf);
static char *somMN_M_RWS08wpclsInitData = "M_WPObject::wpclsInitData";
static somId somId_M_RWS08wpclsInitData = &somMN_M_RWS08wpclsInitData;
#ifdef somId_wpclsInitData
#undef somId_wpclsInitData
#else
#define somId_wpclsInitData somId_M_RWS08wpclsInitData
#endif
static somMethodProc* M_RWS08_parent_M_WPTransient_wpclsInitData_resolved = 0;
#define M_RWS08_parent_M_WPTransient_wpclsInitData(somSelf) \
  ((( somTD_M_WPObject_wpclsInitData ) \
    ((M_RWS08_parent_M_WPTransient_wpclsInitData_resolved)? \
      M_RWS08_parent_M_WPTransient_wpclsInitData_resolved : \
      (M_RWS08_parent_M_WPTransient_wpclsInitData_resolved = \
	somParentNumResolve(M_RWS08CClassData.parentMtab, 1, M_WPObjectClassData.wpclsInitData)))) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPTransient_wpclsInitData
  #ifdef parent_M_WPTransient_wpclsInitData
     #undef parent_M_WPTransient_wpclsInitData
     #define SOMGD_pmc_M_WPTransient_wpclsInitData 1
  #else
     #define parent_M_WPTransient_wpclsInitData M_RWS08_parent_M_WPTransient_wpclsInitData
  #endif /* parent_M_WPTransient_wpclsInitData */
#endif /* SOMGD_pmc_M_WPTransient_wpclsInitData */
#ifndef parent_wpclsInitData
     #define parent_wpclsInitData M_RWS08_parent_M_WPTransient_wpclsInitData
#endif  /* parent_wpclsInitData */
#define M_RWS08_parents_wpclsInitData(arg0) (\
   M_RWS08_parent_M_WPTransient_wpclsInitData(arg0))

/*
 * Overridden method: wpclsUnInitData
 */
#pragma linkage(wpclsUnInitData, system)
SOM_Scope void  SOMLINK wpclsUnInitData(M_RWS08 *somSelf);
static char *somMN_M_RWS08wpclsUnInitData = "M_WPObject::wpclsUnInitData";
static somId somId_M_RWS08wpclsUnInitData = &somMN_M_RWS08wpclsUnInitData;
#ifdef somId_wpclsUnInitData
#undef somId_wpclsUnInitData
#else
#define somId_wpclsUnInitData somId_M_RWS08wpclsUnInitData
#endif
static somMethodProc* M_RWS08_parent_M_WPTransient_wpclsUnInitData_resolved = 0;
#define M_RWS08_parent_M_WPTransient_wpclsUnInitData(somSelf) \
  ((( somTD_M_WPObject_wpclsUnInitData ) \
    ((M_RWS08_parent_M_WPTransient_wpclsUnInitData_resolved)? \
      M_RWS08_parent_M_WPTransient_wpclsUnInitData_resolved : \
      (M_RWS08_parent_M_WPTransient_wpclsUnInitData_resolved = \
	somParentNumResolve(M_RWS08CClassData.parentMtab, 1, M_WPObjectClassData.wpclsUnInitData)))) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPTransient_wpclsUnInitData
  #ifdef parent_M_WPTransient_wpclsUnInitData
     #undef parent_M_WPTransient_wpclsUnInitData
     #define SOMGD_pmc_M_WPTransient_wpclsUnInitData 1
  #else
     #define parent_M_WPTransient_wpclsUnInitData M_RWS08_parent_M_WPTransient_wpclsUnInitData
  #endif /* parent_M_WPTransient_wpclsUnInitData */
#endif /* SOMGD_pmc_M_WPTransient_wpclsUnInitData */
#ifndef parent_wpclsUnInitData
     #define parent_wpclsUnInitData M_RWS08_parent_M_WPTransient_wpclsUnInitData
#endif  /* parent_wpclsUnInitData */
#define M_RWS08_parents_wpclsUnInitData(arg0) (\
   M_RWS08_parent_M_WPTransient_wpclsUnInitData(arg0))

/*
 * Overridden method: wpclsQueryIconData
 */
#pragma linkage(wpclsQueryIconData, system)
SOM_Scope ULONG  SOMLINK wpclsQueryIconData(M_RWS08 *somSelf,
		PICONINFO pIconInfo);
static char *somMN_M_RWS08wpclsQueryIconData = "M_WPObject::wpclsQueryIconData";
static somId somId_M_RWS08wpclsQueryIconData = &somMN_M_RWS08wpclsQueryIconData;
#ifdef somId_wpclsQueryIconData
#undef somId_wpclsQueryIconData
#else
#define somId_wpclsQueryIconData somId_M_RWS08wpclsQueryIconData
#endif

#if 0   // this isn't used & generates a warning, so hide it
static somMethodProc* M_RWS08_parent_M_WPTransient_wpclsQueryIconData_resolved = 0;
#define M_RWS08_parent_M_WPTransient_wpclsQueryIconData(somSelf,pIconInfo) \
  ((( somTD_M_WPObject_wpclsQueryIconData ) \
    ((M_RWS08_parent_M_WPTransient_wpclsQueryIconData_resolved)? \
      M_RWS08_parent_M_WPTransient_wpclsQueryIconData_resolved : \
      (M_RWS08_parent_M_WPTransient_wpclsQueryIconData_resolved = \
	somParentNumResolve(M_RWS08CClassData.parentMtab, 1, M_WPObjectClassData.wpclsQueryIconData)))) \
	 (somSelf,pIconInfo))
#ifndef SOMGD_pmc_M_WPTransient_wpclsQueryIconData
  #ifdef parent_M_WPTransient_wpclsQueryIconData
     #undef parent_M_WPTransient_wpclsQueryIconData
     #define SOMGD_pmc_M_WPTransient_wpclsQueryIconData 1
  #else
     #define parent_M_WPTransient_wpclsQueryIconData M_RWS08_parent_M_WPTransient_wpclsQueryIconData
  #endif /* parent_M_WPTransient_wpclsQueryIconData */
#endif /* SOMGD_pmc_M_WPTransient_wpclsQueryIconData */
#ifndef parent_wpclsQueryIconData
     #define parent_wpclsQueryIconData M_RWS08_parent_M_WPTransient_wpclsQueryIconData
#endif  /* parent_wpclsQueryIconData */
#define M_RWS08_parents_wpclsQueryIconData(arg0,arg1) (\
   M_RWS08_parent_M_WPTransient_wpclsQueryIconData(arg0,arg1))
#endif  // if 0

/*
 * Overridden method: wpclsQueryTitle
 */
#pragma linkage(wpclsQueryTitle, system)
SOM_Scope PSZ  SOMLINK wpclsQueryTitle(M_RWS08 *somSelf);
static char *somMN_M_RWS08wpclsQueryTitle = "M_WPObject::wpclsQueryTitle";
static somId somId_M_RWS08wpclsQueryTitle = &somMN_M_RWS08wpclsQueryTitle;
#ifdef somId_wpclsQueryTitle
#undef somId_wpclsQueryTitle
#else
#define somId_wpclsQueryTitle somId_M_RWS08wpclsQueryTitle
#endif

#if 0   // this isn't used & generates a warning, so hide it
static somMethodProc* M_RWS08_parent_M_WPTransient_wpclsQueryTitle_resolved = 0;
#define M_RWS08_parent_M_WPTransient_wpclsQueryTitle(somSelf) \
  ((( somTD_M_WPObject_wpclsQueryTitle ) \
    ((M_RWS08_parent_M_WPTransient_wpclsQueryTitle_resolved)? \
      M_RWS08_parent_M_WPTransient_wpclsQueryTitle_resolved : \
      (M_RWS08_parent_M_WPTransient_wpclsQueryTitle_resolved = \
	somParentNumResolve(M_RWS08CClassData.parentMtab, 1, M_WPObjectClassData.wpclsQueryTitle)))) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPTransient_wpclsQueryTitle
  #ifdef parent_M_WPTransient_wpclsQueryTitle
     #undef parent_M_WPTransient_wpclsQueryTitle
     #define SOMGD_pmc_M_WPTransient_wpclsQueryTitle 1
  #else
     #define parent_M_WPTransient_wpclsQueryTitle M_RWS08_parent_M_WPTransient_wpclsQueryTitle
  #endif /* parent_M_WPTransient_wpclsQueryTitle */
#endif /* SOMGD_pmc_M_WPTransient_wpclsQueryTitle */
#ifndef parent_wpclsQueryTitle
     #define parent_wpclsQueryTitle M_RWS08_parent_M_WPTransient_wpclsQueryTitle
#endif  /* parent_wpclsQueryTitle */
#define M_RWS08_parents_wpclsQueryTitle(arg0) (\
   M_RWS08_parent_M_WPTransient_wpclsQueryTitle(arg0))
#endif  // if 0

/*
 * Initialize the class data structure
 */
SOMEXTERN struct M_RWS08ClassDataStructure SOMDLINK M_RWS08ClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct M_RWS08CClassDataStructure SOMDLINK M_RWS08CClassData = {(somMethodTabs) NULL};

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_RWS08OM[] = {
    {    &somId_M_RWS08wpclsInitData,
         (somMethodProc *) wpclsInitData    },
    {    &somId_M_RWS08wpclsUnInitData,
         (somMethodProc *) wpclsUnInitData    },
    {    &somId_M_RWS08wpclsQueryIconData,
         (somMethodProc *) wpclsQueryIconData    },
    {    &somId_M_RWS08wpclsQueryTitle,
         (somMethodProc *) wpclsQueryTitle    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_M_RWS08 = "M_RWS08";
static char * somPCN_M_RWS08_M_WPTransient = "M_WPTransient";

static somId somPCM_RWS08[] = {
    &somPCN_M_RWS08_M_WPTransient,
};

static somStaticClassInfo M_RWS08SCI = {
    4, 0, 4, 0, 0, 0,
    M_RWS08_MajorVersion, M_RWS08_MinorVersion,
    0, M_RWS08_MaxNoMethods, 1,
    &somCN_M_RWS08,
    (somId) NULL, 1,
    somPCM_RWS08,
    (somClassDataStructure *) &M_RWS08ClassData,
    (somCClassDataStructure *) &M_RWS08CClassData,
    (somStaticMethod_t *) NULL, M_RWS08OM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

M_RWS08 * SOMLINK M_RWS08NewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    M_WPTransientNewClass(M_WPTransient_MajorVersion,M_WPTransient_MinorVersion);	/* static reference */
    return (somBuildClass(1,&M_RWS08SCI, somtmajorVersion, somtminorVersion));
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */

#endif /* Primary Implementation Support */
//#pragma checkout(resume)

#endif       /* SOM_M_RWS08_ih */

